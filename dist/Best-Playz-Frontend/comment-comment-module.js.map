{"version":3,"sources":["./src/app/comment/shared/comment.service.ts","./src/app/comment/comment.module.ts","./src/app/comment/comment.component.ts","./src/app/comment/comment.component.html","./src/app/comment/comment-routing.module.ts"],"names":[],"mappings":"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","file":"comment-comment-module.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport {Socket} from 'ngx-socket-io';\nimport {Observable} from 'rxjs';\nimport {ClientModel} from './client.model';\nimport {CommentModel} from './comment.model';\nimport {WelcomeDto} from './welcome.dto';\nimport {map} from 'rxjs/operators';\nimport {loginDto} from './login.dto';\nimport {CommentDto} from './comment.dto';\nimport {HighscoreModel} from '../../leaderboard/shared/highscore.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CommentService {\n\n  constructor(private socket: Socket) { }\n\n  postComment(commentDto: CommentDto): void {\n    this.socket.emit('postComment', commentDto);\n  }\n\n  listenForNewComment(): Observable<CommentModel> {\n    return this.socket\n      .fromEvent<CommentModel>('newComment');\n  }\n\n  requestHighscoreComments(highscoreId: string): void {\n    console.log('requestHighscoreComments called');\n    this.socket.emit('requestHighscoreComments', highscoreId);\n  }\n\n  listenForHighscoreComments(): Observable<CommentModel[]> {  // Dto??\n    return this.socket\n      .fromEvent<CommentModel[]>('highscoreComments');\n  }\n\n  listenForClients(): Observable<ClientModel[]> {\n    return this.socket\n      .fromEvent<ClientModel[]>('clients');\n  }\n\n  listenForCommentWelcome(): Observable<WelcomeDto> {\n    return this.socket\n      .fromEvent<WelcomeDto>('welcome');\n  }\n\n  listenForErrors(): Observable<string> {\n    return this.socket\n      .fromEvent<string>('error');\n  }\n\n  listenForConnect(): Observable<string> {\n    return this.socket\n      .fromEvent<string>('connect')\n      .pipe(\n        map(() => {\n          return this.socket.ioSocket.id;\n        })\n      );\n  }\n\n  listenForDisconnect(): Observable<string> {\n    return this.socket\n      .fromEvent<string>('disconnect')\n      .pipe(\n        map(() => {\n          return this.socket.ioSocket.id;\n        })\n      );\n  }\n\n  sendLogin(dto: loginDto): void {\n    console.log(dto.nickname);\n    this.socket.emit('login', dto);\n  }\n\n  disconnect(): void{\n    this.socket.disconnect();\n  }\n\n  connect(): void{\n    this.socket.connect();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CommentRoutingModule } from './comment-routing.module';\nimport { CommentComponent } from './comment.component';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport { SharedModule } from '../shared/shared.module';\n\n\n@NgModule({\n  declarations: [\n    CommentComponent\n  ],\n  imports: [\n    CommonModule,\n    CommentRoutingModule,\n    ReactiveFormsModule,\n    SharedModule,\n  ]\n})\nexport class CommentModule { }\n","import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {CommentService} from './shared/comment.service';\nimport {Observable, Subject, Subscription} from 'rxjs';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {ClientModel} from './shared/client.model';\nimport { CommentModel } from './shared/comment.model';\nimport {loginDto} from './shared/login.dto';\nimport {StorageService} from '../shared/storage.service';\nimport {CommentDto} from './shared/comment.dto';\n\n@Component({\n  selector: 'app-comment',\n  templateUrl: './comment.component.html',\n  styleUrls: ['./comment.component.scss']\n})\nexport class CommentComponent implements OnInit, OnDestroy {\n  commentFC = new FormControl('');\n  comments: CommentModel[] = [];\n  unsubscribe$ = new Subject();\n  loginFC = new FormControl('');\n  clients$: Observable<ClientModel[]> | undefined;\n  client: ClientModel | undefined;\n  error$: Observable<string> | undefined; // move to app.component for global errors\n  socketId: string | undefined;\n  highscoreId = 'mock';  // MOCK\n  isLoggedIn = localStorage.length;\n  userNickname: string | undefined;\n  loggedInUser: ClientModel | undefined;\n\n  constructor(private commentService: CommentService,\n              private storageService: StorageService) {\n  }\n\n  ngOnInit(): void {\n    console.log('Comment Component Initialised');\n    console.log('Logged in as: ', this.storageService.loadClient()?.nickname); //\n\n    this.commentService.connect(); // MUY IMPORTANTE!!\n\n\n    this.userNickname = this.storageService.loadClient()?.nickname;\n    console.log('comment userNickname: ', this.storageService.loadClient()?.nickname);\n\n    this.commentService.requestHighscoreComments(this.highscoreId); // MOCK gameId\n    this.error$ = this.commentService.listenForErrors(); // move to app.component for global errors\n    this.clients$ = this.commentService.listenForClients(); //\n    this.commentService.listenForNewComment()\n      .pipe(\n        takeUntil(this.unsubscribe$)\n      )\n      .subscribe(comment => {\n        console.log('comment received');\n        this.comments.push(comment);\n      });\n\n    this.commentService.listenForHighscoreComments() // MOCK gameId\n      .pipe(\n        take(1)\n      )\n      .subscribe(comments => {\n        console.log(comments.length, ' comments received');\n        this.comments = comments;\n      });\n    this.commentService.listenForConnect()\n      .pipe(\n        takeUntil(this.unsubscribe$)\n      )\n      .subscribe((id) => {\n        // console.log('connect id', id);\n        this.socketId = id;\n      });\n    this.commentService.listenForDisconnect()\n      .pipe(\n        takeUntil(this.unsubscribe$)\n      )\n      .subscribe((id) => {\n        // console.log('disconnect id', id);\n        this.socketId = id;\n      });\n  }\n\n  ngOnDestroy(): void {\n    console.log('CommentModel Component Destroyed');\n    this.unsubscribe$.next();\n    this.unsubscribe$.complete();\n    this.commentService.disconnect();  // Removed to stay connected between routes\n  }\n\n  postComment(): void {\n    console.log('dto nickname: ', this.storageService.loadClient()?.nickname);\n    // loggedInUser = this.storageService.loadCommentClient();\n    if (this.storageService.loadClient()?.nickname) {\n      if (this.commentFC.value) {\n        const commentDto: CommentDto = {\n          highscoreId: '1',  // MOCK !!!\n          text: this.commentFC.value,\n          sender: this.storageService.loadClient()?.nickname,\n        };\n        this.commentService.postComment(commentDto);\n        this.commentFC.patchValue('');\n      }\n    }\n  }\n\n}\n\n","<div fxLayout=\"row\" fxFlex>\n  <div fxLayout=\"column\" fxFlex=\"30\">\n    <mat-card fxFlex>\n      <mat-card-header>\n        <h5>Clients</h5>\n      </mat-card-header>\n      <mat-card-content>\n        <div *ngIf=\"clients$ | async as clients\">\n          <ul>\n            <li *ngFor=\"let client of clients\">\n              {{client.nickname}}\n            </li>\n          </ul>\n        </div>\n      </mat-card-content>\n    </mat-card>\n  </div>\n\n  <div fxLayout=\"column\" fxFlex=\"70\" >\n    <mat-card fxFlex fxLayout=\"column\">\n      <mat-card-header>\n        <h2>Comments for [highscore details] --- (socketId = {{socketId}})</h2>\n      </mat-card-header>\n      <mat-card-content fxFlex fxLayout=\"column\">\n        <mat-list fxFlex class=\"scrollable-mat-list\">\n          <mat-list-item *ngFor=\"let comment of comments\">\n            <mat-icon mat-list-icon>face</mat-icon>\n            <div mat-line class=\"comment-text\">{{comment?.text}} --- {{comment?.id}}</div>\n            <div mat-line class=\"comment-sender-text\" style=\"font-size: x-small\">{{comment?.sender}}  -  {{comment?.posted}}</div>\n            <mat-divider></mat-divider>\n          </mat-list-item>\n        </mat-list>\n      </mat-card-content>\n      <mat-card-actions>\n        <div *ngIf=\"isLoggedIn\">\n          <mat-form-field class=\"primary-text-colour\" fxFlex=\"40\">\n            <mat-label>Write Comment</mat-label>\n            <input matInput type=\"text\" [formControl]=\"commentFC\">\n            <button mat-button matSuffix mat-icon-button aria-label=\"Clear\" (click)=\"postComment()\">\n              <mat-icon>send</mat-icon>\n            </button>\n          </mat-form-field>\n        </div>\n        <div *ngIf=\"!isLoggedIn\"\n          class=\"warn-text-colour\"\n          style=\"font-family: cursive\"\n          style=\"font-size: 14px\">\n          You need to log in to post a comment\n        </div>\n      </mat-card-actions>\n\n      <mat-card-footer fxFlex=\"30px\" style=\"padding-left: 30px\">\n        <div *ngIf=\"error$ | async as error\"\n             class=\"warn-text-colour\"\n             style=\"font-family: cursive\"\n             style=\"font-size: 14px\">\n          {{error}}\n        </div>\n        <div *ngIf=\"!socketId\"\n             class=\"warn-text-colour\"\n             style=\"font-family: cursive\"\n             style=\"font-size: 14px\">\n          connecting...\n        </div>\n      </mat-card-footer>\n    </mat-card >\n\n  </div>\n</div>\n\n\n\n\n\n\n\n\n\n\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { CommentComponent } from './comment.component';\n\nconst routes: Routes = [{ path: '', component: CommentComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class CommentRoutingModule { }\n"],"sourceRoot":"webpack:///"}