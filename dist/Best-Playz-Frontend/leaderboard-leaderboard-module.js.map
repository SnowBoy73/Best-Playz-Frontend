{"version":3,"sources":["./src/app/leaderboard/leaderboard-routing.module.ts","./src/app/leaderboard/leaderboard.component.ts","./src/app/leaderboard/leaderboard.component.html","./src/app/leaderboard/leaderboard.module.ts","./src/app/leaderboard/shared/leaderboard.service.ts"],"names":[],"mappings":"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","file":"leaderboard-leaderboard-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LeaderboardComponent } from './leaderboard.component';\n\nconst routes: Routes = [{ path: '', component: LeaderboardComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class LeaderboardRoutingModule { }\n","import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {LeaderboardService} from './shared/leaderboard.service';\nimport {CommentModel} from '../comment/shared/comment.model';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {Observable, Subject, Subscription} from 'rxjs';\nimport {HighscoreModel} from './shared/highscore.model';\nimport {CommentDto} from '../comment/shared/comment.dto';\nimport {StorageService} from '../shared/storage.service';\nimport {HighscoreDto} from './shared/highscore.dto';\nimport {ClientModel} from '../comment/shared/client.model';\n\n@Component({\n  selector: 'app-leaderboard',\n  templateUrl: './leaderboard.component.html',\n  styleUrls: ['./leaderboard.component.scss']\n})\nexport class LeaderboardComponent implements OnInit, OnDestroy {\n  highscoreFC = new FormControl('');\n  highscores: HighscoreModel[] = [];\n  unsubscribe$ = new Subject();\n  gameId = 1;  // MOCK\n  error$: Observable<string> | undefined; // move to app.component for global errors\n  socketId: string | undefined;\n  isLoggedIn = localStorage.length;\n  userNickname: string | undefined;\n  highscoreSelected = '';\n  chosenHighscore: HighscoreModel | undefined;\n\n  constructor(private leaderboardService: LeaderboardService,\n              private storageService: StorageService) { }\n\n  ngOnInit(): void {\n    console.log('Leaderboard Component Initialised');\n    this.userNickname = this.storageService.loadClient()?.nickname;\n\n    this.leaderboardService.requestGameHighscores(this.gameId) // MOCK gameId\n    this.error$ = this.leaderboardService.listenForErrors(); // move to app.component for global errors\n    this.leaderboardService.listenForNewHighscore()\n      .pipe(\n        takeUntil(this.unsubscribe$)\n      )\n      .subscribe(highscore => {\n        console.log('highscore received');\n        this.highscores.push(highscore);\n      });\n    this.leaderboardService.listenForGameHighscores() // MOCK gameId\n      .pipe(\n        take(1)\n      )\n      .subscribe(highscores => {\n        console.log(highscores.length, ' highscores received');\n        this.highscores = highscores;\n      });\n    this.leaderboardService.connect(); // MUY IMPORTANTE!!\n  }\n\n  postHighscore(): void {\n    console.log('dto nickname: ', this.storageService.loadClient()?.nickname);\n    // loggedInUser = this.storageService.loadCommentClient();\n    if (this.storageService.loadClient()?.nickname) {\n      if (this.highscoreFC.value) {\n        const highscoreDto: HighscoreDto = {\n          nickname: this.storageService.loadClient()?.nickname,\n          gameId: 1,  // MOCK !!!\n          score: this.highscoreFC.value,\n          time: 123, // MOCK\n        };\n        this.leaderboardService.postHighScore(highscoreDto);\n        this.highscoreFC.patchValue('');\n      }\n    }\n  }\n\n  ngOnDestroy(): void {\n    console.log('Leaderboard Component Destroyed');\n    this.unsubscribe$.next();\n    this.unsubscribe$.complete();\n    this.leaderboardService.disconnect();\n  }\n\n  onNgModelChange($event: any) {\n    if (this.highscoreSelected.length !== 0)\n    {\n      const highscoreName = this.highscoreSelected[0].toString();\n      this.chosenHighscore = this.highscores.find(uh => uh.id === highscoreName);\n      if (this.chosenHighscore) {\n        console.log(this.chosenHighscore.id, this.chosenHighscore.score, this.chosenHighscore.nickname);\n        \n        // GO TO COMMENT ROUTE HERE     // this.stockFC.patchValue(this.updatedStock.currentPrice);\n      } else {\n        console.log('error - no highscore with that name found');\n      }\n    }\n  }\n}\n","<div fxLayout=\"row\" fxFlex>\n  <div fxLayout=\"column\" fxFlex=\"30\">\n    <mat-card fxFlex>\n      <mat-card-header>\n        <h5>Game details</h5>\n      </mat-card-header>\n      <mat-card-content>\n          <ul>\n            <li *ngFor=\"let highscore of highscores\">\n              {{highscore.score}} by {{highscore.nickname}} on {{highscore.date}}\n            </li>\n          </ul>\n      </mat-card-content>\n    </mat-card>\n  </div>\n\n  <div fxLayout=\"column\" fxFlex=\"70\" >\n    <mat-card fxFlex fxLayout=\"column\">\n      <mat-card-header>\n        <h2>HighScores (socketId = {{socketId}})</h2>\n      </mat-card-header>\n      <mat-card-content fxFlex fxLayout=\"column\">\n<!--\n-->\n\n        <mat-selection-list fxFlex class=\"scrollList\"\n                            #hiscores [(ngModel)]=\"highscoreSelected\" (ngModelChange)=\"onNgModelChange($event)\" [multiple]=\"false\">\n          <mat-list-option *ngFor=\"let highscore of highscores\"\n                           (click)=\"onNgModelChange(hiscores)\" [value]=\"highscore.id\">\n          <mat-icon mat-list-icon>face</mat-icon>\n          <div mat-line class=\"comment-text\">Score: {{highscore.score}} Time:{{highscore.time}}</div>\n          <div mat-line class=\"comment-sender-text\" style=\"font-size: x-small\">By {{highscore.nickname}}  on  {{highscore.date}}</div>\n          <mat-divider></mat-divider>\n            <mat-divider></mat-divider>\n          </mat-list-option>\n        </mat-selection-list>\n        <!--\n        <mat-list fxFlex class=\"scrollable-mat-list\">\n          <mat-list-item *ngFor=\"let highscore of highscores\">\n            <mat-icon mat-list-icon>face</mat-icon>\n            <div mat-line class=\"comment-text\">Score: {{highscore.score}} Time:{{highscore.time}}</div>\n            <div mat-line class=\"comment-sender-text\" style=\"font-size: x-small\">By {{highscore.nickname}}  on  {{highscore.date}}</div>\n            <mat-divider></mat-divider>\n          </mat-list-item>\n        </mat-list>\n        -->\n\n\n      </mat-card-content>\n      <mat-card-actions>\n        <div *ngIf=\"isLoggedIn\">\n          <mat-form-field class=\"primary-text-colour\" fxFlex=\"40\">\n            <mat-label>Post a mock Highscore (number)</mat-label>\n            <input matInput type=\"text\" [formControl]=\"highscoreFC\">\n            <button mat-button matSuffix mat-icon-button aria-label=\"Clear\" (click)=\"postHighscore()\">\n              <mat-icon>send</mat-icon>\n            </button>\n          </mat-form-field>\n        </div>\n        <div *ngIf=\"!isLoggedIn\"\n          class=\"warn-text-colour\"\n          style=\"font-family: cursive\"\n          style=\"font-size: 14px\">\n          You need to log in to post a mock highscore\n        </div>\n      </mat-card-actions>\n\n      <mat-card-footer fxFlex=\"30px\" style=\"padding-left: 30px\">\n        <div *ngIf=\"error$ | async as error\"\n             class=\"warn-text-colour\"\n             style=\"font-family: cursive\"\n             style=\"font-size: 14px\">\n          {{error}}\n        </div>\n        <div *ngIf=\"!socketId\"\n             class=\"warn-text-colour\"\n             style=\"font-family: cursive\"\n             style=\"font-size: 14px\">\n          You are not connected\n        </div>\n      </mat-card-footer>\n    </mat-card >\n\n  </div>\n</div>\n\n\n\n\n\n\n\n\n\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { LeaderboardRoutingModule } from './leaderboard-routing.module';\nimport { LeaderboardComponent } from './leaderboard.component';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {SharedModule} from '../shared/shared.module';\n\n\n@NgModule({\n  declarations: [\n    LeaderboardComponent\n  ],\n  imports: [\n    CommonModule,\n    LeaderboardRoutingModule,\n    ReactiveFormsModule,\n    SharedModule,\n  ]\n})\nexport class LeaderboardModule { }\n","import { Injectable } from '@angular/core';\nimport {CommentDto} from '../../comment/shared/comment.dto';\nimport {Socket} from 'ngx-socket-io';\nimport {Observable} from 'rxjs';\nimport {CommentModel} from '../../comment/shared/comment.model';\nimport {HighscoreModel} from './highscore.model';\nimport {HighscoreDto} from './highscore.dto';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LeaderboardService {\n  constructor(private socket: Socket) { }\n\n  postHighScore(highscoreDto: HighscoreDto): void {\n    console.log('highscore posted = ', highscoreDto);\n    this.socket.emit('postHighscore', highscoreDto);\n  }\n\n  listenForNewHighscore(): Observable<HighscoreModel> {\n    return this.socket\n      .fromEvent<HighscoreModel>('newHighscore');\n  }\n\n  requestGameHighscores(gameId: number): void {\n    console.log('requestGameHighScore called');\n    this.socket.emit('requestGameHighscores', gameId);\n  }\n\n  listenForGameHighscores(): Observable<HighscoreModel[]> {  // Dto??\n    return this.socket\n      .fromEvent<HighscoreModel[]>('gameHighscores');\n  }\n\n  listenForErrors(): Observable<string> {\n    return this.socket\n      .fromEvent<string>('error');\n  }\n\n  disconnect(): void{\n    this.socket.disconnect();\n  }\n\n  connect(): void{\n    this.socket.connect();\n  }\n}\n"],"sourceRoot":"webpack:///"}